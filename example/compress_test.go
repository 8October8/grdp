// compress_test.go
package main

import (
	"fmt"
	"image/color"
	"testing"

	"github.com/tfriedel6/canvas/glfwcanvas"
)

//func TestSum(t *testing.T) {
//input := []byte{
//16, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 31, 11, 210, 3, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 146, 36, 244, 23, 164, 244, 0, 166, 41, 23, 49, 76, 0, 244, 23, 48, 244, 0, 0, 146, 240, 77, 41, 100, 24, 24, 24, 243, 36, 255, 225, 24, 217, 165, 36, 77, 128, 41, 100, 24, 24, 24, 243, 0, 0, 146, 67, 165, 57, 199, 0, 181, 208, 0, 207, 0, 207, 0, 208, 165, 57, 199, 0, 162, 240, 124, 61, 41, 166, 0, 0, 0, 33, 35, 0, 35, 33, 82, 0, 124, 67, 61, 41, 166, 0, 178, 119, 186, 208, 207, 244, 0, 82, 0, 112, 186, 208, 207, 244, 0, 0, 0, 194, 104, 165, 225, 218, 76, 81, 0, 96, 165, 225, 218, 76, 0, 0, 210, 179, 167, 15, 90, 77, 58, 76, 0, 36, 34, 81, 0, 80, 167, 15, 90, 0, 0, 146, 240, 76, 117, 36, 0, 168, 16, 89, 129, 23, 250, 0, 208, 40, 167, 76, 128, 117, 36, 0, 168, 16, 89, 36, 89, 146, 240, 75, 149, 59, 23, 226, 216, 75, 35, 166, 136, 23, 226, 216, 75, 75, 128, 149, 59, 23, 226, 216, 75, 35, 90, 162, 240, 243, 24, 24, 42, 165, 0, 0, 75, 50, 24, 42, 165, 0, 0, 243, 112, 24, 24, 42, 165, 0, 0, 0, 3, 240, 36, 89, 23, 23, 23, 41, 166, 36, 89, 244, 0, 0, 0, 36, 89, 191, 89, 36, 0, 0, 166, 41, 23, 23, 23, 185, 0, 65, 5, 101, 243, 24, 24, 42, 165, 0, 239, 221, 66, 0, 0, 0, 185, 207, 208, 24, 24, 100, 108, 76, 0, 49, 15, 175, 166, 144, 107, 0, 0, 76, 120, 208, 165, 0, 129, 14, 175, 36, 255, 81, 135, 0, 0, 168, 23, 129, 0, 145, 5, 84, 244, 23, 23, 123, 0, 70, 221, 40, 200, 0, 95, 166, 41, 99, 28, 0, 65, 5, 83, 243, 24, 24, 124, 0, 240, 166, 144, 217, 75, 0, 0, 0, 77, 15, 0, 0, 165, 42, 24, 50, 47, 75, 0, 49, 12, 83, 22, 255, 143, 243, 0, 79, 129, 16, 208, 0, 145, 12, 68, 114, 0, 222, 0, 175, 35, 255, 226, 244, 0, 0, 76, 117, 36, 0, 49, 31, 13, 210, 3, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 146, 36, 242, 27, 164, 242, 0, 166, 45, 27, 53, 76, 0, 242, 27, 48, 242, 0, 0, 146, 240, 75, 41, 104, 28, 28, 28, 241, 36, 252, 223, 28, 215, 169, 36, 75, 128, 41, 104, 28, 28, 28, 241, 0, 0, 146, 67, 165, 55, 201, 0, 181, 206, 0, 205, 0, 205, 0, 206, 165, 55, 201, 0, 162, 240, 126, 63, 45, 166, 0, 0, 0, 31, 35, 0, 35, 31, 80, 0, 126, 67, 63, 45, 166, 0, 178, 119, 190, 212, 211, 242, 0, 80, 0, 112, 190, 212, 211, 242, 0, 0, 0, 194, 104, 165, 223, 216, 76, 79, 0, 96, 165, 223, 216, 76, 0, 0, 210, 179, 165, 15, 90, 75, 56, 76, 0, 36, 32, 79, 0, 80, 165, 15, 90, 0, 0, 146, 240, 76, 121, 36, 0, 166, 16, 89, 129, 23, 246, 0, 206, 40, 165, 76, 128, 121, 36, 0, 166, 16, 89, 36, 93, 146, 240, 75, 147, 63, 27, 224, 220, 75, 35, 170, 136, 27, 224, 220, 75, 75, 128, 147, 63, 27, 224, 220, 75, 35, 94, 162, 240, 241, 28, 28, 46, 165, 0, 0, 75, 54, 28, 46, 165, 0, 0, 241, 112, 28, 28, 46, 165, 0, 0, 0, 3, 240, 36, 93, 27, 27, 27, 45, 166, 36, 93, 242, 0, 0, 0, 36, 93, 191, 93, 36, 0, 0, 166, 45, 27, 27, 27, 189, 0, 65, 5, 101, 241, 28, 28, 46, 165, 0, 239, 225, 66, 0, 0, 0, 189, 211, 212, 28, 28, 104, 108, 76, 0, 49, 15, 175, 166, 144, 105, 0, 0, 76, 120, 212, 165, 0, 129, 14, 175, 36, 252, 79, 135, 0, 0, 166, 23, 129, 0, 145, 5, 84, 242, 27, 27, 125, 0, 70, 225, 40, 202, 0, 95, 166, 45, 103, 28, 0, 65, 5, 83, 241, 28, 28, 126, 0, 240, 166, 144, 215, 75, 0, 0, 0, 75, 15, 0, 0, 165, 46, 28, 54, 47, 75, 0, 49, 12, 83, 22, 252, 143, 241, 0, 79, 129, 16, 206, 0, 145, 12, 68, 114, 0, 226, 0, 175, 35, 251, 224, 242, 0, 0, 76, 121, 36, 0, 49, 31, 13, 210, 3, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 146, 36, 242, 27, 164, 242, 0, 166, 45, 27, 53, 76, 0, 242, 27, 48, 242, 0, 0, 146, 240, 75, 41, 104, 28, 28, 28, 241, 36, 252, 223, 28, 215, 169, 36, 75, 128, 41, 104, 28, 28, 28, 241, 0, 0, 146, 67, 165, 55, 201, 0, 181, 206, 0, 205, 0, 205, 0, 206, 165, 55, 201, 0, 162, 240, 126, 63, 45, 166, 0, 0, 0, 31, 35, 0, 35, 31, 80, 0, 126, 67, 63, 45, 166, 0, 178, 119, 190, 212, 211, 242, 0, 80, 0, 112, 190, 212, 211, 242, 0, 0, 0, 194, 104, 165, 223, 216, 76, 79, 0, 96, 165, 223, 216, 76, 0, 0, 210, 179, 165, 15, 90, 75, 56, 76, 0, 36, 32, 79, 0, 80, 165, 15, 90, 0, 0, 146, 240, 76, 121, 36, 0, 166, 16, 89, 129, 23, 246, 0, 206, 40, 165, 76, 128, 121, 36, 0, 166, 16, 89, 36, 93, 146, 240, 75, 147, 63, 27, 224, 220, 75, 35, 170, 136, 27, 224, 220, 75, 75, 128, 147, 63, 27, 224, 220, 75, 35, 94, 162, 240, 241, 28, 28, 46, 165, 0, 0, 75, 54, 28, 46, 165, 0, 0, 241, 112, 28, 28, 46, 165, 0, 0, 0, 3, 240, 36, 93, 27, 27, 27, 45, 166, 36, 93, 242, 0, 0, 0, 36, 93, 191, 93, 36, 0, 0, 166, 45, 27, 27, 27, 189, 0, 65, 5, 101, 241, 28, 28, 46, 165, 0, 239, 225, 66, 0, 0, 0, 189, 211, 212, 28, 28, 104, 108, 76, 0, 49, 15, 175, 166, 144, 105, 0, 0, 76, 120, 212, 165, 0, 129, 14, 175, 36, 252, 79, 135, 0, 0, 166, 23, 129, 0, 145, 5, 84, 242, 27, 27, 125, 0, 70, 225, 40, 202, 0, 95, 166, 45, 103, 28, 0, 65, 5, 83, 241, 28, 28, 126, 0, 240, 166, 144, 215, 75, 0, 0, 0, 75, 15, 0, 0, 165, 46, 28, 54, 47, 75, 0, 49, 12, 83, 22, 252, 143, 241, 0, 79, 129, 16, 206, 0, 145, 12, 68, 114, 0, 226, 0, 175, 35, 251, 224, 242, 0, 0, 76, 121, 36, 0, 49,
//}
//output := bitmap_decompress(input, 64, 24, 4)
//fmt.Println(output)
//sort.Reverse(ByteSlice(output))
//}
func TestSum(t *testing.T) {
	input := []byte{
		16, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 31, 11, 210, 3, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 146, 36, 244, 23, 164, 244, 0, 166, 41, 23, 49, 76, 0, 244, 23, 48, 244, 0, 0, 146, 240, 77, 41, 100, 24, 24, 24, 243, 36, 255, 225, 24, 217, 165, 36, 77, 128, 41, 100, 24, 24, 24, 243, 0, 0, 146, 67, 165, 57, 199, 0, 181, 208, 0, 207, 0, 207, 0, 208, 165, 57, 199, 0, 162, 240, 124, 61, 41, 166, 0, 0, 0, 33, 35, 0, 35, 33, 82, 0, 124, 67, 61, 41, 166, 0, 178, 119, 186, 208, 207, 244, 0, 82, 0, 112, 186, 208, 207, 244, 0, 0, 0, 194, 104, 165, 225, 218, 76, 81, 0, 96, 165, 225, 218, 76, 0, 0, 210, 179, 167, 15, 90, 77, 58, 76, 0, 36, 34, 81, 0, 80, 167, 15, 90, 0, 0, 146, 240, 76, 117, 36, 0, 168, 16, 89, 129, 23, 250, 0, 208, 40, 167, 76, 128, 117, 36, 0, 168, 16, 89, 36, 89, 146, 240, 75, 149, 59, 23, 226, 216, 75, 35, 166, 136, 23, 226, 216, 75, 75, 128, 149, 59, 23, 226, 216, 75, 35, 90, 162, 240, 243, 24, 24, 42, 165, 0, 0, 75, 50, 24, 42, 165, 0, 0, 243, 112, 24, 24, 42, 165, 0, 0, 0, 3, 240, 36, 89, 23, 23, 23, 41, 166, 36, 89, 244, 0, 0, 0, 36, 89, 191, 89, 36, 0, 0, 166, 41, 23, 23, 23, 185, 0, 65, 5, 101, 243, 24, 24, 42, 165, 0, 239, 221, 66, 0, 0, 0, 185, 207, 208, 24, 24, 100, 108, 76, 0, 49, 15, 175, 166, 144, 107, 0, 0, 76, 120, 208, 165, 0, 129, 14, 175, 36, 255, 81, 135, 0, 0, 168, 23, 129, 0, 145, 5, 84, 244, 23, 23, 123, 0, 70, 221, 40, 200, 0, 95, 166, 41, 99, 28, 0, 65, 5, 83, 243, 24, 24, 124, 0, 240, 166, 144, 217, 75, 0, 0, 0, 77, 15, 0, 0, 165, 42, 24, 50, 47, 75, 0, 49, 12, 83, 22, 255, 143, 243, 0, 79, 129, 16, 208, 0, 145, 12, 68, 114, 0, 222, 0, 175, 35, 255, 226, 244, 0, 0, 76, 117, 36, 0, 49, 31, 13, 210, 3, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 146, 36, 242, 27, 164, 242, 0, 166, 45, 27, 53, 76, 0, 242, 27, 48, 242, 0, 0, 146, 240, 75, 41, 104, 28, 28, 28, 241, 36, 252, 223, 28, 215, 169, 36, 75, 128, 41, 104, 28, 28, 28, 241, 0, 0, 146, 67, 165, 55, 201, 0, 181, 206, 0, 205, 0, 205, 0, 206, 165, 55, 201, 0, 162, 240, 126, 63, 45, 166, 0, 0, 0, 31, 35, 0, 35, 31, 80, 0, 126, 67, 63, 45, 166, 0, 178, 119, 190, 212, 211, 242, 0, 80, 0, 112, 190, 212, 211, 242, 0, 0, 0, 194, 104, 165, 223, 216, 76, 79, 0, 96, 165, 223, 216, 76, 0, 0, 210, 179, 165, 15, 90, 75, 56, 76, 0, 36, 32, 79, 0, 80, 165, 15, 90, 0, 0, 146, 240, 76, 121, 36, 0, 166, 16, 89, 129, 23, 246, 0, 206, 40, 165, 76, 128, 121, 36, 0, 166, 16, 89, 36, 93, 146, 240, 75, 147, 63, 27, 224, 220, 75, 35, 170, 136, 27, 224, 220, 75, 75, 128, 147, 63, 27, 224, 220, 75, 35, 94, 162, 240, 241, 28, 28, 46, 165, 0, 0, 75, 54, 28, 46, 165, 0, 0, 241, 112, 28, 28, 46, 165, 0, 0, 0, 3, 240, 36, 93, 27, 27, 27, 45, 166, 36, 93, 242, 0, 0, 0, 36, 93, 191, 93, 36, 0, 0, 166, 45, 27, 27, 27, 189, 0, 65, 5, 101, 241, 28, 28, 46, 165, 0, 239, 225, 66, 0, 0, 0, 189, 211, 212, 28, 28, 104, 108, 76, 0, 49, 15, 175, 166, 144, 105, 0, 0, 76, 120, 212, 165, 0, 129, 14, 175, 36, 252, 79, 135, 0, 0, 166, 23, 129, 0, 145, 5, 84, 242, 27, 27, 125, 0, 70, 225, 40, 202, 0, 95, 166, 45, 103, 28, 0, 65, 5, 83, 241, 28, 28, 126, 0, 240, 166, 144, 215, 75, 0, 0, 0, 75, 15, 0, 0, 165, 46, 28, 54, 47, 75, 0, 49, 12, 83, 22, 252, 143, 241, 0, 79, 129, 16, 206, 0, 145, 12, 68, 114, 0, 226, 0, 175, 35, 251, 224, 242, 0, 0, 76, 121, 36, 0, 49, 31, 13, 210, 3, 242, 17, 242, 17, 242, 17, 242, 17, 242, 17, 146, 36, 242, 27, 164, 242, 0, 166, 45, 27, 53, 76, 0, 242, 27, 48, 242, 0, 0, 146, 240, 75, 41, 104, 28, 28, 28, 241, 36, 252, 223, 28, 215, 169, 36, 75, 128, 41, 104, 28, 28, 28, 241, 0, 0, 146, 67, 165, 55, 201, 0, 181, 206, 0, 205, 0, 205, 0, 206, 165, 55, 201, 0, 162, 240, 126, 63, 45, 166, 0, 0, 0, 31, 35, 0, 35, 31, 80, 0, 126, 67, 63, 45, 166, 0, 178, 119, 190, 212, 211, 242, 0, 80, 0, 112, 190, 212, 211, 242, 0, 0, 0, 194, 104, 165, 223, 216, 76, 79, 0, 96, 165, 223, 216, 76, 0, 0, 210, 179, 165, 15, 90, 75, 56, 76, 0, 36, 32, 79, 0, 80, 165, 15, 90, 0, 0, 146, 240, 76, 121, 36, 0, 166, 16, 89, 129, 23, 246, 0, 206, 40, 165, 76, 128, 121, 36, 0, 166, 16, 89, 36, 93, 146, 240, 75, 147, 63, 27, 224, 220, 75, 35, 170, 136, 27, 224, 220, 75, 75, 128, 147, 63, 27, 224, 220, 75, 35, 94, 162, 240, 241, 28, 28, 46, 165, 0, 0, 75, 54, 28, 46, 165, 0, 0, 241, 112, 28, 28, 46, 165, 0, 0, 0, 3, 240, 36, 93, 27, 27, 27, 45, 166, 36, 93, 242, 0, 0, 0, 36, 93, 191, 93, 36, 0, 0, 166, 45, 27, 27, 27, 189, 0, 65, 5, 101, 241, 28, 28, 46, 165, 0, 239, 225, 66, 0, 0, 0, 189, 211, 212, 28, 28, 104, 108, 76, 0, 49, 15, 175, 166, 144, 105, 0, 0, 76, 120, 212, 165, 0, 129, 14, 175, 36, 252, 79, 135, 0, 0, 166, 23, 129, 0, 145, 5, 84, 242, 27, 27, 125, 0, 70, 225, 40, 202, 0, 95, 166, 45, 103, 28, 0, 65, 5, 83, 241, 28, 28, 126, 0, 240, 166, 144, 215, 75, 0, 0, 0, 75, 15, 0, 0, 165, 46, 28, 54, 47, 75, 0, 49, 12, 83, 22, 252, 143, 241, 0, 79, 129, 16, 206, 0, 145, 12, 68, 114, 0, 226, 0, 175, 35, 251, 224, 242, 0, 0, 76, 121, 36, 0, 49,
	}
	Data := bitmap_decompress(input, 64, 24, 4)
	fmt.Println(Data)
	wnd, cv, err := glfwcanvas.CreateWindow(800, 600, "Hello")
	if err != nil {
		panic(err)
	}
	defer wnd.Close()

	wnd.MainLoop(func() {
		fmt.Println("-------------")
		m := cv.GetImageData(0, 0, 64, 1)
		y := 0
		k := 0
		for x := 0; x < 64*1*4-3; x += 4 {
			fmt.Println("x:", x)
			k = x / 64
			y = x % 64
			fmt.Println("k:", k, "y:", y)
			m.SetRGBA(0+k, 0+y,
				color.RGBA{uint8(Data[x]), uint8(Data[x+1]), uint8(Data[x+2]), uint8(Data[x+3])})
			y++
		}
		cv.PutImageData(m, 0, 0)
	})
}
