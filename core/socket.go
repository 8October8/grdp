package core

import (
	"encoding/hex"
	"fmt"
	"github.com/icodeface/grdp/glog"
	"github.com/icodeface/grdp/protocol/nla"
	"github.com/icodeface/tls"
	"net"
)

type SocketLayer struct {
	conn    net.Conn
	tlsConn *tls.Conn
	ntlm    *nla.NTLMv2
}

func NewSocketLayer(conn net.Conn, ntlm *nla.NTLMv2) *SocketLayer {
	l := &SocketLayer{
		conn:    conn,
		tlsConn: nil,
		ntlm:    ntlm,
	}
	return l
}

func (s *SocketLayer) Read(b []byte) (n int, err error) {
	if s.tlsConn != nil {
		return s.tlsConn.Read(b)
	}
	return s.conn.Read(b)
}

func (s *SocketLayer) Write(b []byte) (n int, err error) {
	if s.tlsConn != nil {
		return s.tlsConn.Write(b)
	}
	return s.conn.Write(b)
}

func (s *SocketLayer) Close() error {
	if s.tlsConn != nil {
		err := s.tlsConn.Close()
		if err != nil {
			return err
		}
	}
	return s.conn.Close()
}

func (s *SocketLayer) StartTLS() error {
	glog.Info("StartTLS")
	config := &tls.Config{
		InsecureSkipVerify:       true,
		MinVersion:               tls.VersionTLS10,
		MaxVersion:               tls.VersionTLS13,
		PreferServerCipherSuites: true,
	}
	s.tlsConn = tls.Client(s.conn, config)
	return s.tlsConn.Handshake()
}

func (s *SocketLayer) StartNLA() error {
	glog.Debug("StartNLA")

	err := s.StartTLS()
	if err != nil {
		glog.Info("start tls failed", err)
		return err
	}

	// req := nla.EncodeDERTRequest([]*nla.NegotiateMessage{s.ntlm.GetNegotiateMessage()}, "", "")
	req, _ := hex.DecodeString("302fa003020102a12830263024a02204204e544c4d53535000010000003582086000000000000000000000000000000000")

	_, err = s.Write(req)
	if err != nil {
		glog.Info("err send DERTRequest", err)
		return err
	}
	resp := make([]byte, 1024)
	n, err := s.Read(resp)
	if err != nil {
		return fmt.Errorf("read %s", err)
	} else {
		glog.Info("read success!!!")
	}

	return s.recvChallenge(resp[:n])
}

func (s *SocketLayer) recvChallenge(data []byte) error {
	glog.Debug("recvChallenge", hex.EncodeToString(data), string(data))
	// rdpy 30820102a003020102a181fa3081f73081f4a081f10481ee4e544c4d53535000020000001e001e003800000035828a62afdfeff287a450fe000000000000000098009800560000000601b01d0000000f570049004e002d00460037005200410041004d004100500034004a00430002001e00570049004e002d00460037005200410041004d004100500034004a00430001001e00570049004e002d00460037005200410041004d004100500034004a00430004001e00570049004e002d00460037005200410041004d004100500034004a00430003001e00570049004e002d00460037005200410041004d004100500034004a00430007000800cc72c83c6f34d50100000000
	// grdp 150301002082bf3197b34d85b17fab86bec445bbc585a76270839327c6fcfd37088f
	req, err := nla.DecodeDERTRequest(data)
	if err != nil {
		return err
	}
	fmt.Println(req)
	// todo

	resp := make([]byte, 1024)
	_, err = s.Read(resp)
	if err != nil {
		return err
	}
	return s.recvPubKeyInc(resp)
}

func (s *SocketLayer) recvPubKeyInc(data []byte) error {
	// todo
	return nil
}
